party_weThey == 'All of the time' ~ 5
))
allWaves_df <- allWaves_df %>% mutate(party_iden = case_when(
party_iden == 'Not at all' ~ 1,
party_iden == 'Very little' ~ 2,
party_iden == 'Somewhat' ~ 3,
party_iden == 'A great deal' ~ 4
))
### Re-scaling
allWaves_df$party_imp <- (allWaves_df$party_imp - 1) / 3
allWaves_df$party_describe <- (allWaves_df$party_describe - 1) / 3
allWaves_df$party_weThey <- (allWaves_df$party_weThey - 1) / 4
allWaves_df$party_iden <- (allWaves_df$party_iden - 1) / 3
allWaves_df$partyIden_index <- rowMeans(allWaves_df[partyIden_index_items], na.rm = TRUE)
allWaves_df$partyIden_index[is.na(allWaves_df$partyIden_index)] <- 0
## Drop moderates
allWaves_df <- allWaves_df %>% filter(resp_party7 != 4)
## Reshape dataframe for models
firstGather_df <- allWaves_df %>%
select(workerId, condition, issueType, resp_party7, partyIden_index,
occLicensing_pos:sameSex_pos, v1_therm_1, v2_therm_1, v3_therm_1) %>%
pivot_longer(cols = c(v1_therm_1, v2_therm_1, v3_therm_1),
names_to = 'vignette',
names_pattern = 'v(.)_therm_.',
values_to = 'therm')
secondGather_df <- allWaves_df %>%
select(v1_socialClose, v2_socialClose, v3_socialClose) %>%
pivot_longer(cols = c(v1_socialClose, v2_socialClose, v3_socialClose),
names_to = 'vignette',
names_pattern = 'v(.)_socialClose',
values_to = 'socialClose') %>%
select(-vignette)
thirdGather_df <- allWaves_df %>%
select(v1_party, v2_party, v3_party) %>%
pivot_longer(cols = c(v1_party, v2_party, v3_party),
names_to = 'vignette',
names_pattern = 'v(.)_party',
values_to = 'vig_party') %>%
select(-vignette)
fourthGather_df <- allWaves_df %>%
select(v1_issue, v2_issue, v3_issue) %>%
pivot_longer(cols = c(v1_issue, v2_issue, v3_issue),
names_to = 'vignette',
names_pattern = 'v(.)_issue',
values_to = 'vig_issue') %>%
select(-vignette)
fifthGather_df <- allWaves_df %>%
select(v1_issuePosition, v2_issuePosition, v3_issuePosition) %>%
pivot_longer(cols = c(v1_issuePosition, v2_issuePosition, v3_issuePosition),
names_to = 'vignette',
names_pattern = 'v(.)_issuePosition',
values_to = 'vig_issuePosition') %>%
select(-vignette)
models_df <- cbind(firstGather_df, secondGather_df, thirdGather_df,
fourthGather_df, fifthGather_df)
## Create IVs
models_df <- models_df %>% mutate(party_pres = case_when(
grepl("party", condition) ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(match_party = case_when( # Warning: Zero when vig_party == NA
resp_party7 < 4 & vig_party == 'a Democrat' ~ 1,
resp_party7 > 4 & vig_party == 'a Republican' ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(issue_pres = case_when(
grepl("policy", condition) ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(match_issue = case_when( # Warning: Zero when vig_issuePosition == NA
grepl("should be required to have licenses", vig_issuePosition) & occLicensing_pos == '${lm://Field/3}' ~ 1,
grepl("does not improve the quality", vig_issuePosition) & occLicensing_pos == '${lm://Field/4}' ~ 1,
grepl("carriers should be prohibited", vig_issuePosition) & mobileData_pos == '${lm://Field/3}' ~ 1,
grepl("carriers should be allowed", vig_issuePosition) & mobileData_pos == '${lm://Field/4}' ~ 1,
grepl("should be able to seize private land", vig_issuePosition) & emDomain_pos == '${lm://Field/3}' ~ 1,
grepl("never be allowed to seize", vig_issuePosition) & emDomain_pos == '${lm://Field/4}' ~ 1,
grepl("sent back", vig_issuePosition) & DREAMer_pos == '${lm://Field/3}' ~ 1,
grepl("become citizens", vig_issuePosition) & DREAMer_pos == '${lm://Field/4}' ~ 1,
grepl("more difficult for people to buy a gun", vig_issuePosition) & easyGun_pos == '${lm://Field/3}' ~ 1,
grepl("easier for people to buy a gun", vig_issuePosition) & easyGun_pos == '${lm://Field/4}' ~ 1,
grepl("should be allowed to adopt", vig_issuePosition) & sameSex_pos == '${lm://Field/3}' ~ 1,
grepl("not be allowed to adopt", vig_issuePosition) & sameSex_pos == '${lm://Field/4}' ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(vig_issuePosition_deviant = case_when(
grepl("sent back", vig_issuePosition) & vig_party == 'a Republican' ~ 0,
grepl("become citizens", vig_issuePosition) & vig_party == 'a Democrat' ~ 0,
grepl("more difficult for people to buy a gun", vig_issuePosition) & vig_party == 'a Democrat' ~ 0,
grepl("easier for people to buy a gun", vig_issuePosition) & vig_party == 'a Republican' ~ 0,
grepl("should be allowed to adopt", vig_issuePosition) & vig_party == 'a Democrat' ~ 0,
grepl("not be allowed to adopt", vig_issuePosition) & vig_party == 'a Republican' ~ 0,
issue_pres == 0 ~ NA_real_,
TRUE ~ 1
))
models_df <- models_df %>% mutate(deviant_wNA = case_when(
is.na(vig_issuePosition_deviant) ~ 'none',
vig_issuePosition_deviant == 1 ~ 'deviant',
vig_issuePosition_deviant == 0 ~ 'norm'
))
models_df$deviant_wNA <- models_df$deviant_wNA %>% factor(levels = c('none', 'norm', 'deviant'))
## Convert vignette column to numeric
models_df$vignette <- as.numeric(models_df$vignette)
## Replace NAs in issueType column
models_df$issueType <- models_df$issueType %>% as.character()
models_df$issueType[is.na(models_df$issueType)] = 'none'
### Novel Issues
spec1_novel_therm <- lmer(therm ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'novel' | issueType == 'none')
))
spec1_novel_therm %>% summary()
spec1_novel_socialClose <- lmer(socialClose ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'novel' | issueType == 'none')
))
spec1_novel_socialClose %>% summary()
### Fam. Issues
spec1_fam_therm <- lmer(therm ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'fam' | issueType == 'none')
))
spec1_fam_therm %>% summary()
spec1_fam_socialClose <- lmer(socialClose ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'fam' | issueType == 'none')
))
spec1_fam_socialClose %>% summary()
### Novel Issues
spec1_novel_therm <- lmer(therm ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'novel' | issueType == 'none')
))
spec1_novel_therm %>% summary()
### Novel Issues
spec1_novel_therm <- lmer(therm ~ match_party + issue_pres + match_party*issue_pres + as.factor(vignette)+(1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'novel' | issueType == 'none')
))
spec1_novel_therm %>% summary()
models_df$issueType
version()
version
libs <- c('boot', 'effects', 'gtools', 'lme4', 'margins', 'skimr', 'stargazer', 'tidyverse')
libraries(libs)
# Load and clean data
wave1_orig <- read.csv('study2/study2_wave1_data.csv')
wave1_orig <- wave1_orig[-c(1, 2),]
wave2_orig <- read.csv('study2//study2_wave2_data.csv')
wave2_orig <- wave2_orig[-c(1, 2),]
wave2_orig <- wave2_orig %>% filter(!is.na(condition) &
DistributionChannel != 'preview' &
confirmCode == 437835 &
workerId !=  'A_WORKER_ID')
wave2_orig <- wave2_orig %>% filter(!is.na(condition) &
DistributionChannel != 'preview' &
confirmCode == 437835 &
workerId !=  'A_WORKER_ID' &
!duplicated(workerId))
## Drop incompletes and test cases
wave1_orig <- wave1_orig %>% filter(confirmCode == 742282 &
DistributionChannel != 'preview' &
workerId !=  'A_WORKER_ID' &
!duplicated(workerId))
## Merge dataframes for Waves 1 and 2
wave1_orig$workerId <- as.character(wave1_orig$workerId)
wave2_orig$workerId <- as.character(wave2_orig$workerId)
wave1_df <- wave1_orig %>% select(age:workerId)
wave2_df <- wave2_orig %>% select(v1_therm_1:issueType)
allWaves_df <- left_join(wave2_df, wave1_df, by = 'workerId')
## Convert therm columns to numeric
allWaves_df$v1_therm_1 <- allWaves_df$v1_therm_1 %>% as.numeric()
allWaves_df$v2_therm_1 <- allWaves_df$v2_therm_1 %>% as.numeric()
allWaves_df$v3_therm_1 <- allWaves_df$v3_therm_1 %>% as.numeric()
## Prep. policy columns
old_cols <- names(allWaves_df)[grep('X.{1,2}_policy_...', names(allWaves_df))]
for (i in 1:12) {
first_col <- paste('X', as.character(i), '_policy_1.2', sep = "")
sec_col <- paste('X', as.character(i), '_policy_2.1', sep = "")
new_col <- paste('X', as.character(i), '_position', sep = "")
allWaves_df[eval(new_col)] <- allWaves_df[eval(first_col)]
allWaves_df[eval(new_col)][allWaves_df[eval(first_col)] == ''] <-
allWaves_df[eval(sec_col)][allWaves_df[eval(first_col)] == '']
}
allWaves_df <- allWaves_df %>% select(-one_of(old_cols))
allWaves_df <- allWaves_df %>% mutate(occLicensing_pos = X1_novel_self,
mobileData_pos = X5_position,
emDomain_pos = X6_position,
DREAMer_pos = X8_position,
easyGun_pos = X10_position,
sameSex_pos = X12_position)
## Prep. social-distance columns
neigh_items <- c('v1_neigh', 'v2_neigh', 'v3_neigh')
marry_items <- c('v1_marry', 'v2_marry', 'v3_marry')
allWaves_df <- allWaves_df %>% mutate_at(vars(one_of(neigh_items)), funs(case_when(
. == 'Not at all comfortable' ~ 1,
. == 'Not too comfortable' ~ 2,
. == 'Somewhat comfortable' ~ 3,
. == 'Extremely comfortable' ~ 4
)))
allWaves_df <- allWaves_df %>% mutate_at(vars(one_of(marry_items)), funs(case_when(
. == 'Not at all upset' ~ 4,
. == 'Not too upset' ~ 3,
. == 'Somewhat upset' ~ 2,
. == 'Extremely upset' ~ 1
)))
allWaves_df$v1_socialClose <- rowMeans(allWaves_df[c('v1_neigh', 'v1_marry')], na.rm = TRUE) # Shouldn't have NAs. If we do, however, we'll use the item that's present.
allWaves_df$v2_socialClose <- rowMeans(allWaves_df[c('v2_neigh', 'v2_marry')], na.rm = TRUE)
allWaves_df$v3_socialClose <- rowMeans(allWaves_df[c('v3_neigh', 'v3_marry')], na.rm = TRUE)
## Prep. respondent party column
allWaves_df <- allWaves_df %>% mutate(resp_party7 = case_when(
resp_party == 'Democrat' & resp_partyStrength == 'Strong ${q://QID7/ChoiceGroup/SelectedChoices}' ~ 1,
resp_party == 'Democrat' & resp_partyStrength == 'Not very strong ${q://QID7/ChoiceGroup/SelectedChoices}' ~ 2,
resp_partyLean == 'Democratic Party' ~ 3,
resp_partyLean == 'Neither' ~ 4,
resp_partyLean == 'Republican Party' ~ 5,
resp_party == 'Republican' & resp_partyStrength == 'Not very strong ${q://QID7/ChoiceGroup/SelectedChoices}' ~ 6,
resp_party == 'Republican' & resp_partyStrength == 'Strong ${q://QID7/ChoiceGroup/SelectedChoices}' ~ 7,
))
## Prep. partisan identity columns
partyIden_index_items <- c('party_imp', 'party_describe', 'party_weThey', 'party_iden')
allWaves_df <- allWaves_df %>% mutate(party_imp = case_when(
party_imp == 'Not at all important' ~ 1,
party_imp == 'Not very important' ~ 2,
party_imp == 'Very important' ~ 3,
party_imp == 'Extremely important' ~ 4
))
allWaves_df <- allWaves_df %>% mutate(party_describe = case_when(
party_describe == 'Not at all well' ~ 1,
party_describe == 'Not very well' ~ 2,
party_describe == 'Very well' ~ 3,
party_describe == 'Extremely well' ~ 4
))
allWaves_df <- allWaves_df %>% mutate(party_weThey = case_when(
party_weThey == 'Never' ~ 1,
party_weThey == 'Rarely' ~ 2,
party_weThey == 'Some of the time' ~ 3,
party_weThey == 'Most of the time' ~ 4,
party_weThey == 'All of the time' ~ 5
))
allWaves_df <- allWaves_df %>% mutate(party_iden = case_when(
party_iden == 'Not at all' ~ 1,
party_iden == 'Very little' ~ 2,
party_iden == 'Somewhat' ~ 3,
party_iden == 'A great deal' ~ 4
))
### Re-scaling
allWaves_df$party_imp <- (allWaves_df$party_imp - 1) / 3
allWaves_df$party_describe <- (allWaves_df$party_describe - 1) / 3
allWaves_df$party_weThey <- (allWaves_df$party_weThey - 1) / 4
allWaves_df$party_iden <- (allWaves_df$party_iden - 1) / 3
allWaves_df$partyIden_index <- rowMeans(allWaves_df[partyIden_index_items], na.rm = TRUE)
allWaves_df$partyIden_index[is.na(allWaves_df$partyIden_index)] <- 0
## Drop moderates
allWaves_df <- allWaves_df %>% filter(resp_party7 != 4)
## Reshape dataframe for models
firstGather_df <- allWaves_df %>%
select(workerId, condition, issueType, resp_party7, partyIden_index,
occLicensing_pos:sameSex_pos, v1_therm_1, v2_therm_1, v3_therm_1) %>%
pivot_longer(cols = c(v1_therm_1, v2_therm_1, v3_therm_1),
names_to = 'vignette',
names_pattern = 'v(.)_therm_.',
values_to = 'therm')
secondGather_df <- allWaves_df %>%
select(v1_socialClose, v2_socialClose, v3_socialClose) %>%
pivot_longer(cols = c(v1_socialClose, v2_socialClose, v3_socialClose),
names_to = 'vignette',
names_pattern = 'v(.)_socialClose',
values_to = 'socialClose') %>%
select(-vignette)
thirdGather_df <- allWaves_df %>%
select(v1_party, v2_party, v3_party) %>%
pivot_longer(cols = c(v1_party, v2_party, v3_party),
names_to = 'vignette',
names_pattern = 'v(.)_party',
values_to = 'vig_party') %>%
select(-vignette)
fourthGather_df <- allWaves_df %>%
select(v1_issue, v2_issue, v3_issue) %>%
pivot_longer(cols = c(v1_issue, v2_issue, v3_issue),
names_to = 'vignette',
names_pattern = 'v(.)_issue',
values_to = 'vig_issue') %>%
select(-vignette)
fifthGather_df <- allWaves_df %>%
select(v1_issuePosition, v2_issuePosition, v3_issuePosition) %>%
pivot_longer(cols = c(v1_issuePosition, v2_issuePosition, v3_issuePosition),
names_to = 'vignette',
names_pattern = 'v(.)_issuePosition',
values_to = 'vig_issuePosition') %>%
select(-vignette)
models_df <- cbind(firstGather_df, secondGather_df, thirdGather_df,
fourthGather_df, fifthGather_df)
## Create IVs
models_df <- models_df %>% mutate(party_pres = case_when(
grepl("party", condition) ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(match_party = case_when( # Warning: Zero when vig_party == NA
resp_party7 < 4 & vig_party == 'a Democrat' ~ 1,
resp_party7 > 4 & vig_party == 'a Republican' ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(issue_pres = case_when(
grepl("policy", condition) ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(match_issue = case_when( # Warning: Zero when vig_issuePosition == NA
grepl("should be required to have licenses", vig_issuePosition) & occLicensing_pos == '${lm://Field/3}' ~ 1,
grepl("does not improve the quality", vig_issuePosition) & occLicensing_pos == '${lm://Field/4}' ~ 1,
grepl("carriers should be prohibited", vig_issuePosition) & mobileData_pos == '${lm://Field/3}' ~ 1,
grepl("carriers should be allowed", vig_issuePosition) & mobileData_pos == '${lm://Field/4}' ~ 1,
grepl("should be able to seize private land", vig_issuePosition) & emDomain_pos == '${lm://Field/3}' ~ 1,
grepl("never be allowed to seize", vig_issuePosition) & emDomain_pos == '${lm://Field/4}' ~ 1,
grepl("sent back", vig_issuePosition) & DREAMer_pos == '${lm://Field/3}' ~ 1,
grepl("become citizens", vig_issuePosition) & DREAMer_pos == '${lm://Field/4}' ~ 1,
grepl("more difficult for people to buy a gun", vig_issuePosition) & easyGun_pos == '${lm://Field/3}' ~ 1,
grepl("easier for people to buy a gun", vig_issuePosition) & easyGun_pos == '${lm://Field/4}' ~ 1,
grepl("should be allowed to adopt", vig_issuePosition) & sameSex_pos == '${lm://Field/3}' ~ 1,
grepl("not be allowed to adopt", vig_issuePosition) & sameSex_pos == '${lm://Field/4}' ~ 1,
TRUE ~ 0
))
models_df <- models_df %>% mutate(vig_issuePosition_deviant = case_when(
grepl("sent back", vig_issuePosition) & vig_party == 'a Republican' ~ 0,
grepl("become citizens", vig_issuePosition) & vig_party == 'a Democrat' ~ 0,
grepl("more difficult for people to buy a gun", vig_issuePosition) & vig_party == 'a Democrat' ~ 0,
grepl("easier for people to buy a gun", vig_issuePosition) & vig_party == 'a Republican' ~ 0,
grepl("should be allowed to adopt", vig_issuePosition) & vig_party == 'a Democrat' ~ 0,
grepl("not be allowed to adopt", vig_issuePosition) & vig_party == 'a Republican' ~ 0,
issue_pres == 0 ~ NA_real_,
TRUE ~ 1
))
models_df <- models_df %>% mutate(deviant_wNA = case_when(
is.na(vig_issuePosition_deviant) ~ 'none',
vig_issuePosition_deviant == 1 ~ 'deviant',
vig_issuePosition_deviant == 0 ~ 'norm'
))
models_df$deviant_wNA <- models_df$deviant_wNA %>% factor(levels = c('none', 'norm', 'deviant'))
## Convert vignette column to numeric
models_df$vignette <- as.numeric(models_df$vignette)
## Replace NAs in issueType column
models_df$issueType <- models_df$issueType %>% as.character()
models_df$issueType[is.na(models_df$issueType)] = 'none'
### Novel Issues
spec1_novel_therm <- lmer(therm ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'novel' | issueType == 'none')
))
spec1_novel_therm %>% summary()
spec1_novel_socialClose <- lmer(socialClose ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'novel' | issueType == 'none')
))
spec1_novel_socialClose %>% summary()
### Fam. Issues
spec1_fam_therm <- lmer(therm ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'fam' | issueType == 'none')
))
spec1_fam_therm %>% summary()
spec1_fam_socialClose <- lmer(socialClose ~ match_party + issue_pres + match_party*issue_pres + (1|workerId),
data = models_df %>% filter(party_pres == 1 &
(issueType == 'fam' | issueType == 'none')
))
spec1_fam_socialClose %>% summary()
spec1_fam_therm %>% summary()
spec1_novel_therm %>% summary()
wave2_orig <- read.csv('study2//study2_wave2_data.csv')
wave2_orig <- wave2_orig[-c(1, 2),]
library(blogdown)
install.packages("blogdown")
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = FALSE,
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.show = TRUE,
hiline = TRUE
)
library(tidyverse)
library(tidyverse)
library(ggdag)
labelled_dag <- dagify(y ~ x, y ~ z, x~z) %>%
tidy_dagitty() %>%
dag_label(labels = c("x" = "negative partisanship", "y" = "vote", "z" = "positive partisanship"))
ggdag(labelled_dag,stylized = T,use_labels = "label",text = F) + theme_dag_blank()
library(dagitty)
library(ggdag)
labelled_dag <- dagify(y ~ x, y ~ z) %>%
tidy_dagitty() %>%
dag_label(labels = c("x" = "negative partisanship", "y" = "vote", "z" = "positive partisanship"))
ggdag(labelled_dag,stylized = T,use_labels = "label",text = F) + theme_dag_blank()
library(scholar)
predict_h_index("agGvWl8AAAAJ")
predict_h_index("agGvWl8AAAAJ")
setwd("~/Dropbox/Apps/Overleaf/Negative Partisanship/Presentation")
bankert <- rio::import("../Bankert/CCES Negative PID.dta")
bankert <- rio::import("../Bankert/CCES Negative PID.dta")
b <- lm(Vote_House~Positive_PID+Negative_PID,bankert,weights=weights_UGA)
a <- lm(Vote_House~Positive_PID,bankert,weights = weights_UGA)
a <- lm(Vote_House~Positive_PID,bankert,weights = weights_UGA)
library(texreg)
htmlreg(list(b),doctype=F,color = "white")
summary(contcont)
library(rio)
library(tidyverse)
library(ggplot2)
anes <- import("~/Dropbox/anes_timeseries_cdf_dta/anes_timeseries_cdf.dta")
anes <- anes %>% filter(VCF0004 %in% seq(1948, 2016, by = 4), !is.na(VCF0704a), !is.na(VCF0301))
pres_vote <- anes$VCF0704a
pres_vote <- pres_vote - 1
pid <- anes$VCF0301 - 4
strong <-  ifelse(pid %in% c(-3,3), sign(pid), 0)
weak <-    ifelse(pid %in% c(-2,2), sign(pid), 0)
leaners <- ifelse(pid %in% c(-1,1), sign(pid), 0)
year <- anes$VCF0004
weights <- anes$VCF0009x
all_data <- data.frame(pres_vote, strong, weak, leaners, year, weights)
res <- NULL
for (yr in unique(year)){
mod <- glm(pres_vote ~ strong + weak + leaners,
family = binomial(link = "probit"),
data = all_data %>% filter(year == yr))
N <- length(pres_vote[year == yr])
res <- rbind(res, data.frame("year" = yr, "repubBias" = coef(mod)[1], "strong" = coef(mod)[2], "weak" = coef(mod)[3],
"leaners" = coef(mod)[4], "n" = N,
"avgCoef" = (sum(strong[year == yr]!=0)/N)*coef(mod)[2] + (sum(weak[year == yr]!=0)/N)*coef(mod)[3] +
(sum(leaners[year == yr]!=0)/N)*coef(mod)[4]))
}
res$Coverage <- "Bartels"
res$Coverage[res$year > 1996] <- "Additional"
##look at average result cover time
ggplot(res, aes(year, avgCoef, colour = Coverage)) +
geom_point() +
geom_line() +
theme_bw() +
ylim(c(0,2))
##look by group
ggplot(res) +
geom_point(aes(year, strong, colour = Coverage)) +
geom_line(aes(year, strong, colour = Coverage)) +
geom_point(aes(year, weak, colour = Coverage)) +
geom_line(aes(year, weak, colour = Coverage), linetype = "dashed") +
geom_point(aes(year, leaners, colour = Coverage)) +
geom_line(aes(year, leaners, colour = Coverage), linetype = "dotted") +
theme_bw() +
ylim(c(0,2))
rnorm(n = 1000,mean = 0,1)
x <- rnorm(n = 1000,mean = 0,1)
y <- .3*x + rnorm(n = 1000,mean = 0,1)
lm(y~x)
z <- round(.3*y + rnorm(n = 1000,mean = 0,1))
z
z <- round(.3*y + rnorm(n = 1000,mean = 3,1))
z
lm(y~x+z)
lm(y~x+as.factor(z))
z <- as.factor(round(.3*y + rnorm(n = 1000,mean = 3,1)))
library(lfe)
library(lfe)
install.packages("lfe")
felm(y~x|z)
library(lfe)
felm(y~x|z)
felm(y~x|as.numeric(z))
data(ChickWeights)
data(ChickWeight)
ChickWeight$Diet
felm(weight~Time|as.numeric(Diet))
felm(weight~Time|as.numeric(Diet),ChickWeight)
felm(weight~Time|(Diet),ChickWeight)
library(xaringanthemer)
extra_css <- list(
".small" = list("font-size" = "80%"),
".xxlarge" = list("font-size" = "120%"),
".full-width" = list(
display = "flex",
width   = "100%",
flex    = "1 1 auto"
)
)
style_mono_accent_inverse(
text_font_size = "x-large",extra_css = extra_css
)
style_mono_accent_inverse(
text_font_size = "x-large",extra_css = extra_css
)
warnings()
library(blogdown)
install.packages("blogdown")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
git gc
